name: Tests

on:
  # Trigger the workflow on push or pull request,
  # but only for the master branch
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  Tests:
    name: ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [Ubuntu, MacOS, Windows]
        python-version: [3.7, 3.8, 3.9]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        shell: bash
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Install poetry
        shell: bash
        run: pip install poetry==1.0.5

      - name: Configure poetry
        shell: bash
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: poetry run pip --version >/dev/null 2>&1 || rm -rf .venv

      - name: Install dependencies
        shell: bash
        run: poetry install

      - name: Execute tests
        shell: bash
        run: poetry run pytest -q randomvars/tests

      - name: Execute doctests on Linux
        shell: bash
        if: runner.os == 'Linux'
        run: poetry run pytest -q --doctest-modules randomvars

      - name: Check formatting on Linux
        shell: bash
        if: runner.os == 'Linux'
        run: poetry run black randomvars --check

      - name: Generate coverage report
        if: github.event_name == 'push' && matrix.os == 'Ubuntu' && matrix.python-version == '3.8'
        run: |
          poetry run pytest --cov=randomvars --cov-report=xml

      - name: Upload coverage to Codecov
        if: github.event_name == 'push' && matrix.os == 'Ubuntu' && matrix.python-version == '3.8'
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
